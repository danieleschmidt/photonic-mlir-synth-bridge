[build-system]
requires = ["setuptools>=61.0", "wheel", "pybind11>=2.10.0"]
build-backend = "setuptools.build_meta"

[project]
name = "photonic-mlir"
version = "0.1.0"
description = "MLIR Dialect and HLS Generator for Silicon Photonic AI Accelerators"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Photonic MLIR Team", email = "team@photonic-mlir.org"}
]
maintainers = [
    {name = "Photonic MLIR Team", email = "team@photonic-mlir.org"}
]
keywords = ["photonics", "mlir", "ai", "accelerators", "hls", "silicon"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Compilers",
]
requires-python = ">=3.9"
dependencies = [
    "torch>=1.13.0",
    "numpy>=1.21.0",
    "pybind11>=2.10.0",
    "psutil>=5.9.0",
    "python-json-logger>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=2.5.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
    "bandit>=1.7.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]
benchmark = [
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "pandas>=1.4.0",
]

[project.scripts]
photonic-compile = "photonic_mlir.cli:compile_command"
photonic-simulate = "photonic_mlir.cli:simulate_command"
photonic-benchmark = "photonic_mlir.cli:benchmark_command"

[project.urls]
Homepage = "https://github.com/danieleschmidt/photonic-mlir-synth-bridge"
Documentation = "https://photonic-mlir.readthedocs.io/"
Repository = "https://github.com/danieleschmidt/photonic-mlir-synth-bridge"
"Bug Tracker" = "https://github.com/danieleschmidt/photonic-mlir-synth-bridge/issues"

[tool.setuptools.packages.find]
where = ["python"]

[tool.setuptools.package-data]
photonic_mlir = ["pdks/*.json", "templates/*.mlir", "examples/*.py"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | llvm-project
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--cov=photonic_mlir",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--junit-xml=test-results.xml"
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "performance: Performance tests",
    "hardware: Hardware-dependent tests",
    "slow: Slow tests",
    "security: Security tests",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

# Coverage configuration
[tool.coverage.run]
source = ["python/photonic_mlir"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/build/*",
    "*/dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection in tests

# Ruff configuration (alternative to flake8)
[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings  
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
target-version = "py39"
line-length = 88

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # imported but unused
"tests/**/*" = ["E501"]   # line too long in tests