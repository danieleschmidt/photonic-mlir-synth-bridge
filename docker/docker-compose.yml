version: '3.8'

services:
  # Main Photonic MLIR service
  photonic-mlir:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    image: photonic-mlir:latest
    container_name: photonic-mlir-main
    restart: unless-stopped
    ports:
      - "8080:8080"  # API server port
      - "8888:8888"  # Jupyter server port
    volumes:
      - photonic_data:/data
      - photonic_logs:/logs
      - photonic_cache:/data/cache
      - ./config:/app/config:ro
    environment:
      - PHOTONIC_LOG_LEVEL=INFO
      - PHOTONIC_CACHE_SIZE_MB=1024
      - PHOTONIC_MAX_WORKERS=4
      - PHOTONIC_ENABLE_METRICS=true
    healthcheck:
      test: ["CMD", "python", "-c", "import photonic_mlir; photonic_mlir.health_check()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis cache for distributed operations
  redis:
    image: redis:7-alpine
    container_name: photonic-mlir-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: photonic-mlir-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: photonic-mlir-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=photonic123
      - GF_USERS_ALLOW_SIGN_UP=false

  # Jupyter notebook server for development
  jupyter:
    build:
      context: ..
      dockerfile: docker/Dockerfile.jupyter
    image: photonic-mlir-jupyter:latest
    container_name: photonic-mlir-jupyter
    restart: unless-stopped
    ports:
      - "8889:8888"
    volumes:
      - jupyter_notebooks:/app/notebooks
      - photonic_data:/data
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=photonic-mlir-token
    profiles:
      - dev

  # Load balancer for multiple instances
  nginx:
    image: nginx:alpine
    container_name: photonic-mlir-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - photonic-mlir
    profiles:
      - production

  # Database for storing compilation results
  postgres:
    image: postgres:15-alpine
    container_name: photonic-mlir-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=photonic_mlir
      - POSTGRES_USER=photonic
      - POSTGRES_PASSWORD=photonic_secure_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U photonic -d photonic_mlir"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - production

volumes:
  photonic_data:
    driver: local
  photonic_logs:
    driver: local
  photonic_cache:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  jupyter_notebooks:
    driver: local
  postgres_data:
    driver: local

networks:
  default:
    name: photonic-mlir-network
    driver: bridge